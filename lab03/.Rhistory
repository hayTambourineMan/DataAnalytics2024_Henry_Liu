library(readr)
biota <- read_csv("Desktop/biota.csv")
View(biota)
library(readr)
X92_98_FIXED <- read_csv("Desktop/92_98_FIXED.csv")
View(X92_98_FIXED)
library(readr)
biota <- read_csv("Desktop/biota.csv", col_types = cols(year = col_date(format = "%m/%d/%Y")))
View(biota)
demo()
library(readr)
epi2024results06022024 <- read_csv("Desktop/Data Analysis/Lab/epi2024results06022024.csv")
View(epi2024results06022024)
library(ggplot2)
### set working directory
setwd("/Users/henryliu/Documents/GitHub/DataAnalytics2024_Henry_Liu/lab03/")
# Load the dataset
epi <- read.csv("epi2024results_DA_F24_lab03.csv")
library(dplyr)
library(dplyr)
library(dplyr)
library(ggplot2)
### set working directory
setwd("/Users/henryliu/Documents/GitHub/DataAnalytics2024_Henry_Liu/lab03/")
# Load the dataset
epi <- read.csv("epi2024results_DA_F24_lab03.csv")
# Load the dataset
epi_data <- read.csv("epi2024results_DA_F24_lab03.csv")
### Variable Distributions
# 2 subsets for "Southern Asia" and "Eastern Europe"
southern_asia <- epi_data %>% filter(region == "Southern Asia")
eastern_europe <- epi_data %>% filter(region == "Eastern Europe")
# 1.1
# Plot for Southern Asia
ggplot(southern_asia, aes(x = EPI)) +
geom_histogram(aes(y = ..density..), binwidth = 5, fill = "blue", alpha = 0.5) +
geom_density(color = "red", size = 1) +
ggtitle("EPI Distribution - Southern Asia") +
xlab("EPI") +
ylab("Density")
# Plot for Eastern Europe
ggplot(eastern_europe, aes(x = EPI)) +
geom_histogram(aes(y = ..density..), binwidth = 5, fill = "green", alpha = 0.5) +
geom_density(color = "blue", size = 1) +
ggtitle("EPI Distribution - Eastern Europe") +
xlab("EPI") +
ylab("Density")
# 1.2
# QQ plot for Southern Asia
qqnorm(southern_asia$EPI, main = "QQ Plot - Southern Asia (EPI)")
qqline(southern_asia$EPI)
# QQ plot for Eastern Europe
qqnorm(eastern_europe$EPI, main = "QQ Plot - Eastern Europe (EPI)")
qqline(eastern_europe$EPI)
# 2.1
# Choose 5 variables: ECO, BDH, MKP, MHP, and CDF.
linear_model <- lm(EPI ~ ECO + BDH + MKP + MHP + CDF, data = epi_data)
summary(linear_model)
# Plot the most significant variable (ECO) against another variable (e.g., BDH) and overlay the fitted line
ggplot(epi_data, aes(x = ECO, y = BDH)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle("Scatter plot of ECO vs BDH with fitted line") +
xlab("ECO") +
ylab("BDH")
# 2.2
southern_asia <- epi_data %>% filter(region == "Southern Asia")
# Fit the linear model for Southern Asia only
linear_model_southern_asia <- lm(EPI ~ ECO + BDH + MKP + MHP + CDF, data = southern_asia)
# Summary of the model for Southern Asia
model_summary_southern_asia <- summary(linear_model_southern_asia)
print(model_summary_southern_asia)
# 2.2
# Subset the data for Eastern Europe
eastern_europe <- epi_data %>% filter(region == "Eastern Europe")
# Fit the linear model for Eastern Europe
linear_model_eastern_europe <- lm(EPI ~ ECO + BDH + MKP + MHP + CDF, data = eastern_europe)
summary_eastern_europe <- summary(linear_model_eastern_europe)
print(summary_eastern_europe)
# Step 2.2: Plot the most significant variable (ECO) against another variable (e.g., BDH) for Eastern Europe
ggplot(eastern_europe, aes(x = ECO, y = BDH)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
ggtitle("Scatter plot of ECO vs BDH with fitted line (Eastern Europe)") +
xlab("ECO") +
ylab("BDH")
# 3.1
# variables: ECO, BDH, MKP, MHP, CDF
# regions: "Eastern Europe", "Latin America & Caribbean", "Southern Asia"
subset1 <- epi_data %>%
filter(region %in% c("Eastern Europe", "Latin America & Caribbean", "Southern Asia")) %>%
select(ECO, BDH, MKP, MHP, CDF, region)
# Encode the regions as factors (for classification)
subset1$region <- as.factor(subset1$region)
# Split the data into training and testing sets (70% training, 30% testing)
set.seed(123)
trainIndex1 <- createDataPartition(subset1$region, p = 0.7, list = FALSE)
test1 <- subset1[-trainIndex1, ]
train1 <- subset1[trainIndex1, ]
library(ggplot2)
library(dplyr)
trainIndex1 <- createDataPartition(subset1$region, p = 0.7, list = FALSE)
# 3.1
library(caret)
# 3.1
install.packages("caret")
library(caret)
# variables: ECO, BDH, MKP, MHP, CDF
# regions: "Eastern Europe", "Latin America & Caribbean", "Southern Asia"
subset1 <- epi_data %>%
filter(region %in% c("Eastern Europe", "Latin America & Caribbean", "Southern Asia")) %>%
select(ECO, BDH, MKP, MHP, CDF, region)
# Encode the regions as factors
subset1$region <- as.factor(subset1$region)
# Split the data into training and testing sets (70% training, 30% testing)
set.seed(123)
trainIndex1 <- createDataPartition(subset1$region, p = 0.7, list = FALSE)
train1 <- subset1[trainIndex1, ]
test1 <- subset1[-trainIndex1, ]
# Train a kNN model (k = 5)
knn_model1 <- knn(train = train1[, -6], test = test1[, -6], cl = train1$region, k = 5)
install.packages("class")
library(class)
# 3.1
install.packages("caret")
library(caret)
# variables: ECO, BDH, MKP, MHP, CDF
# regions: "Eastern Europe", "Latin America & Caribbean", "Southern Asia"
subset1 <- epi_data %>%
filter(region %in% c("Eastern Europe", "Latin America & Caribbean", "Southern Asia")) %>%
select(ECO, BDH, MKP, MHP, CDF, region)
# 3.1
install.packages("caret")
library(ggplot2)
library(dplyr)
### set working directory
setwd("/Users/henryliu/Documents/GitHub/DataAnalytics2024_Henry_Liu/lab03/")
# Load the dataset
epi_data <- read.csv("epi2024results_DA_F24_lab03.csv")
# 2 subsets for "Southern Asia" and "Eastern Europe"
southern_asia <- epi_data %>% filter(region == "Southern Asia")
eastern_europe <- epi_data %>% filter(region == "Eastern Europe")
library(caret)
library(class)
# variables: ECO, BDH, MKP, MHP, CDF
# regions: "Eastern Europe", "Latin America & Caribbean", "Southern Asia"
subset1 <- epi_data %>%
filter(region %in% c("Eastern Europe", "Latin America & Caribbean", "Southern Asia")) %>%
select(ECO, BDH, MKP, MHP, CDF, region)
# Encode the regions as factors
subset1$region <- as.factor(subset1$region)
# Split the data into training and testing sets (70% training, 30% testing)
set.seed(123)
trainIndex1 <- createDataPartition(subset1$region, p = 0.7, list = FALSE)
train1 <- subset1[trainIndex1, ]
test1 <- subset1[-trainIndex1, ]
# Train a kNN model (k = 5)
knn_model1 <- knn(train = train1[, -6], test = test1[, -6], cl = train1$region, k = 5)
# a subset of 5 variables and 3 regions
subset1 <- epi_data %>%
filter(region %in% c("Eastern Europe", "Latin America & Caribbean", "Southern Asia")) %>%
select(ECO, BDH, MKP, MHP, CDF, region)
subset1 <- na.omit(subset1)
subset1$region <- as.factor(subset1$region)
set.seed(123)
trainIndex1 <- createDataPartition(subset1$region, p = 0.7, list = FALSE)
train1 <- subset1[trainIndex1, ]
test1 <- subset1[-trainIndex1, ]
# Train a kNN model (k = 5)
knn_model1 <- knn(train = train1[, -6], test = test1[, -6], cl = train1$region, k = 5)
# Evaluate the model using a contingency matrix
confusion_matrix1 <- confusionMatrix(knn_model1, test1$region)
print(confusion_matrix1)
# Calculate accuracy
accuracy1 <- confusion_matrix1$overall['Accuracy']
print(paste("Accuracy for Model 1:", accuracy1))
# 3.2: Repeat
subset2 <- epi_data %>%
filter(region %in% c("Western Europe", "Sub-Saharan Africa", "Greater Middle East")) %>%
select(ECO, BDH, MKP, MHP, CDF, region)
subset2 <- na.omit(subset2)
subset2$region <- as.factor(subset2$region)
trainIndex2 <- createDataPartition(subset2$region, p = 0.7, list = FALSE)
train2 <- subset2[trainIndex2, ]
test2 <- subset2[-trainIndex2, ]
# Train a kNN model (k = 5)
knn_model2 <- knn(train = train2[, -6], test = test2[, -6], cl = train2$region, k = 5)
# Evaluate the model using a contingency matrix
confusion_matrix2 <- confusionMatrix(knn_model2, test2$region)
print(confusion_matrix2)
# Calculate accuracy
accuracy2 <- confusion_matrix2$overall['Accuracy']
print(paste("Accuracy for Model 2:", accuracy2))
### 4.1
set.seed(123)
kmeans_subset1 <- kmeans(subset1, centers = 3, nstart = 25)
library(ggplot2)
library(dplyr)
# 4.1
# Subset 1: "Eastern Europe", "Latin America & Caribbean", "Southern Asia"
subset1 <- epi_data %>%
filter(region %in% c("Eastern Europe", "Latin America & Caribbean", "Southern Asia")) %>%
select(ECO, BDH, MKP, MHP, CDF)
# Subset 2: "Western Europe", "Sub-Saharan Africa", "Greater Middle East"
subset2 <- epi_data %>%
filter(region %in% c("Western Europe", "Sub-Saharan Africa", "Greater Middle East")) %>%
select(ECO, BDH, MKP, MHP, CDF)
subset1 <- na.omit(subset1)
subset2 <- na.omit(subset2)
set.seed(123)
kmeans_subset1 <- kmeans(subset1, centers = 3, nstart = 25)
kmeans_subset2 <- kmeans(subset2, centers = 3, nstart = 25)
wcss_subset1 <- kmeans_subset1$tot.withinss
wcss_subset2 <- kmeans_subset2$tot.withinss
print(paste("WCSS for Subset 1 (Eastern Europe, Latin America & Caribbean, Southern Asia):", wcss_subset1))
print(paste("WCSS for Subset 2 (Western Europe, Sub-Saharan Africa, Greater Middle East):", wcss_subset2))
# 1.2
# Define a function to compute WCSS for a range of k values
wcss_k <- function(data, max_k) {
wcss <- numeric(max_k)
for (k in 2:max_k) {
model <- kmeans(data, centers = k, nstart = 25)
wcss[k] <- model$tot.withinss
}
return(wcss)
}
max_k <- 10
wcss_values_subset1 <- wcss_k(subset1, max_k)
wcss_values_subset2 <- wcss_k(subset2, max_k)
wcss_df <- data.frame(
k = 2:max_k,
Subset1_WCSS = wcss_values_subset1[2:max_k],
Subset2_WCSS = wcss_values_subset2[2:max_k]
)
# Plot the WCSS for both subsets across different k values
ggplot(wcss_df, aes(x = k)) +
geom_line(aes(y = Subset1_WCSS, color = "Subset 1 (Eastern Europe, Latin America, Southern Asia)")) +
geom_line(aes(y = Subset2_WCSS, color = "Subset 2 (Western Europe, Sub-Saharan Africa, Greater Middle East)")) +
labs(title = "WCSS for different values of k",
x = "Number of clusters (k)",
y = "Within-Cluster Sum of Squares (WCSS)") +
scale_color_manual(values = c("blue", "red"),
name = "Region Groups") +
theme_minimal()
